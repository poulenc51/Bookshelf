CREATE USER docker;

-- Main用DB
CREATE DATABASE bookshelf;
GRANT ALL PRIVILEGES ON DATABASE bookshelf TO docker;
\c bookshelf

-- 書籍テーブル
CREATE TABLE IF NOT EXISTS book (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title VARCHAR(100) NOT NULL,
  author_id INT,
  publication_date DATE,
  is_deleted BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON COLUMN book.id IS '書籍ID';
COMMENT ON COLUMN book.title IS 'タイトル';
COMMENT ON COLUMN book.author_id IS '著者ID';
COMMENT ON COLUMN book.publication_date IS '出版日';
COMMENT ON COLUMN book.is_deleted IS '削除フラグ';
COMMENT ON COLUMN book.created_at IS '作成日';
COMMENT ON COLUMN book.updated_at IS '更新日';

CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_book_modtime
BEFORE UPDATE ON book
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at_column();

INSERT INTO book (id, title, author_id, publication_date, is_deleted, created_at, updated_at)
VALUES
    (1, 'ノルウェイの森', 1, '1987-9-4', FALSE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
    (2, '吾輩は猫である', 2, '1905-1-1', FALSE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
    (3, '羅生門', 3, '1971-3-5', FALSE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
    (4, 'Harry Potter and the Philosopher’s Stone', 4, '1997-6-26', FALSE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
    (5, '罪と罰', 5, '1866-12-1', FALSE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
ON CONFLICT (id)
DO UPDATE SET
    title = EXCLUDED.title,
    author_id = EXCLUDED.author_id,
    publication_date = EXCLUDED.publication_date,
    is_deleted = EXCLUDED.is_deleted,
    created_at = EXCLUDED.created_at,
    updated_at = EXCLUDED.updated_at;

SELECT setval('book_id_seq', (SELECT MAX(id) FROM book));

-- 著者テーブル
CREATE TABLE IF NOT EXISTS author (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description VARCHAR(1000) NOT NULL,
  is_deleted BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON COLUMN author.id IS '著者ID';
COMMENT ON COLUMN author.name IS '著者名';
COMMENT ON COLUMN author.description IS '説明';
COMMENT ON COLUMN author.is_deleted IS '削除フラグ';
COMMENT ON COLUMN author.created_at IS '作成日';
COMMENT ON COLUMN author.updated_at IS '更新日';

CREATE TRIGGER update_author_updated_at
BEFORE UPDATE ON author
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

INSERT INTO author (id, name, description, is_deleted, created_at, updated_at)
VALUES
    (1, '村上　春樹', '村上 春樹は、日本の小説家・翻訳家。京都府京都市伏見区生まれ、兵庫県西宮市・芦屋市育ち。 早稲田大学在学中にジャズ喫茶を開く', FALSE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
    (2, '夏目　漱石', '夏目 漱石は、日本の教師・小説家・評論家・英文学者・俳人。武蔵国江戸牛込馬場下横町出身。 本名は夏目 金之助。俳号は愚陀仏。明治末期から大正初期にかけて活躍し、今日に通用する言文一致の現代書き言葉を作った近代日本文学の文豪のうちの一人', FALSE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
    (3, '芥川　龍之介', '', FALSE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
    (4, 'J. K. Rowling', '', FALSE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
    (5, 'Фёдор Mихáйлович Достоéвский(フョードル・ミハイロヴィチ・ドストエフスキー)', '', FALSE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
ON CONFLICT (id)
DO UPDATE SET
    name = EXCLUDED.name,
    description = EXCLUDED.description,
    is_deleted = EXCLUDED.is_deleted,
    created_at = EXCLUDED.created_at,
    updated_at = EXCLUDED.updated_at;

SELECT setval('author_id_seq', (SELECT MAX(id) FROM author));


-- テスト用DB
CREATE DATABASE test;
GRANT ALL PRIVILEGES ON DATABASE test TO docker;
\c test

-- 書籍テーブル
CREATE TABLE IF NOT EXISTS book (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title VARCHAR(100) NOT NULL,
  author_id INT,
  publication_date DATE,
  is_deleted BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON COLUMN book.id IS '書籍ID';
COMMENT ON COLUMN book.title IS 'タイトル';
COMMENT ON COLUMN book.author_id IS '著者ID';
COMMENT ON COLUMN book.publication_date IS '出版日';
COMMENT ON COLUMN book.is_deleted IS '削除フラグ';
COMMENT ON COLUMN book.created_at IS '作成日';
COMMENT ON COLUMN book.updated_at IS '更新日';

CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_book_modtime
BEFORE UPDATE ON book
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at_column();

-- 著者テーブル
CREATE TABLE IF NOT EXISTS author (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description VARCHAR(1000) NOT NULL,
  is_deleted BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON COLUMN author.id IS '著者ID';
COMMENT ON COLUMN author.name IS '著者名';
COMMENT ON COLUMN author.description IS '説明';
COMMENT ON COLUMN author.is_deleted IS '削除フラグ';
COMMENT ON COLUMN author.created_at IS '作成日';
COMMENT ON COLUMN author.updated_at IS '更新日';

CREATE TRIGGER update_author_updated_at
BEFORE UPDATE ON author
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();
